//  All external data is defined here
//  most of the data is loaded into different structures at run time
//  some internal structures shared by many modules are here
const std = @import("std");
const defs = @import("definitions.zig");

// Map level types.
// The following data structures define the persistent format
// used in the lumps of the WAD files.

/// Lump order in a map WAD: each map needs a couple of lumps
/// to provide a complete scene geometry description.
pub const Lumps = enum(u8) {
    label,
    things,
    lineDefs,
    sideDefs,
    vertexts,
    segments,
    subSectors,
    nodes,
    sectors,
    reject,
    blockmap,
};

/// A single Vertex.
pub const MapVertex = struct {
    x: i16,
    y: i16,
};

/// A SideDef, defining the visual appearance of a wall,
/// by setting textures and offsets.
pub const MapSideDef = struct {
    textureOffset: i16,
    rowOffset: i16,
    topTexture: [8]u8,
    bottomTexture: [8]u8,
    midTextture: [8]u8,
    // Front sector, towards viewer.
    sector: i16,
};

/// A LineDef, as used for editing, and as input
/// to the BSP builder.
pub const MapLineDef = struct {
    v1: i16,
    v2: i16,
    flags: i16,
    special: i16,
    tag: i16,
    // sidenum[1] will be -1 if one sided
    sideNumber: [2]i16,
};

//
// LineDef attributes.
//

/// Solid, is an obstacle.
pub const Blocking = 1;
/// Blocks monsters only.
pub const BlockMonsters = 2;

/// Backside will not
///  if not two sided.
pub const TwoSided = 4;

/// If a texture is pegged, the texture will have
/// the end exposed to air held constant at the
/// top or bottom of the texture (stairs or pulled
/// down things) and will move with a height change
/// of one of the neighbor sectors.
/// Unpegged textures allways have the first row of
/// the texture at the top pixel of the line for both
/// top and bottom textures (use next to windows).
pub const DontPegTop = 8;
pub const DontPegBottom = 16;

/// In AutoMap: don't map as two sided: IT'S A SECRET!
pub const Secret = 32;

/// Sound rendering: don't let sound cross two of these.
pub const SoundBlock = 64;

/// Don't draw on the automap at all.
pub const DontDraw = 128;

/// Set if already seen, thus drawn in automap.
pub const Mapped = 256;

/// Sector definition, from editing.
pub const MapSector = struct {
    floorHeight: i16,
    ceilingHeight: i16,
    floorPic: [8]u8,
    ceilingPic: [8]u8,
    lightLevel: i16,
    special: i16,
    tag: i16,
};

/// SubSector, as generated by BSP.
pub const MapSubSector = struct {
    numSegments: i16,

    // Index of first one, segs are stored sequentially.
    firstSegment: i16,
};

/// LineSeg, generated by splitting LineDefs
/// using partition lines selected by BSP builder.
pub const MapSegment = struct {
    v1: i16,
    v2: i16,
    angle: i16,
    lineDef: i16,
    side: i16,
    offset: i16,
};

/// Indicate a leaf.
pub const SubSector = 0x8000;

/// BSP node structure.
pub const MapNode = struct {
    // Partition line from (x,y) to x+dx,y+dy)

    x: i16,
    y: i16,
    dx: i16,
    dy: i16,
    // Bounding box for each child,
    // clip against view frustum.
    boundingBox: [2][4]i16,
    // If NF_SUBSECTOR its a subsector,
    // else it's a node of another subtree.
    children: [2]u16,
};

pub const MapThing = struct {
    x: i16,
    y: i16,
    angle: i16,
    tType: i16,
    options: i16,
};
